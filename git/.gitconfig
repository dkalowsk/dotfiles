[user]
	name = Dan Kalowsky
[core]
	editor = nvim
	eol = lf
	autocrlf = input
	# Don't prompt for commit messages on merge commits
	mergeoptions = --no-edit
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	trustctime = false
	pager = diff-so-fancy | less -RFX
	exludesFile = /Users/dkalowsky/.gitignore
[fetch]
	# always prune when fetching (and pulling)
	prune = true
[rerere]
	enabled = false
[alias]
	# show short one line commit info with both author and commiter names
	ls = log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an >> %cn>%Creset' --abbrev-commit
	# show commits with list of files per each commit
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --numstat
	f = "!git ls-files | grep -i"
	grep = grep -Iin
	gr = grep -Ii
	# show the commit history with a graph of merge timelines
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an >> %cn>%Creset' --abbrev-commit
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"
	# list the top commiters to a repo
	names = shortlog -nse --no-merges
	# assume the file is unchanged to stop changes being seen by git
	hide = update-index --assume-unchanged
	# stop assuming the file is unchanged
	unhide = update-index --no-assume-unchanged
	# show the current list of files to be assumed unchanged
	hidden = !git ls-files -v | grep  \"^[[:lower:]]\"
	ignored = !git status -s --ignored | grep \"^!!\"
	# get the current number of commits ahead of source branch
	count = "!f() { git rev-list --count HEAD ^$(git rev-parse --abbrev-ref --symbolic-full-name @{u});  }; f"
	# On an interactive add, work around the githooks adding back in the whole file at commit
	#pcommit = !git stash save -q "original index" && git commit -s && git stash apply -q --index stash@{1}
	pcommit = !git stash save -q --keep-index "current wd" && git commit -s && git stash pop -q --index stash@{0}
	# remove the last commit on head
	undo = !git reset HEAD~1 --mixed
	# unstage the changes in a given file
	unstage = reset HEAD --
	# view the current changes in the staging area
	staged = diff --cached
	# print the name of the current branch
	current-branch = symbolic_ref --short HEAD
	# cherry-pick a commit and apply sign off
	sign = cherry-pick --signoff
	# edit all the unmerged/conflict files
	edit-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; vim `f`"
	# now just add the unmerged/conflict files
	add-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"
	# use the short status
	sstatus = status -sb
	master = pull origin master
	quick-stats = ! /Users/dkalowsky/bin/git-quick-stats
	dad = !curl -w \"\\n\" https://icanhazdadjoke.com/
	nah = "!git reset --hard & git clean -df"
	restore = "!git config remote.origin.fetch \"+refs/heads/*:refs/remotes/origin/*\" && git fetch origin"
	frbi = "!f() { git rebase -i $(git log --pretty=oneline --color=always | fzf --ansi | cut -d ' ' -f1)^ ; }; f"
[diff]
	tool = meld 
	# Use the slower but better patience diff algorithm
	algorithm = patience
	# Use new diff algorithm to make function diffs look better
	# Basically line up hunks to be part of the same grouping
	compactionHeuristic = true
	# use mneomic prefixed (Index, Work tree, Commit, Object) instead of standard A and B notation
	mnemonicprefix = true
	# use the experimental heuristics
	indentHeuristic = on
	# enable the new color moved to show moved code in a different shade
	colorMoved = zebra
[difftool "meld"]
	cmd = meld "$LOCAL" "$REMOTE"
[merge]
	tool = meld 
[mergetool]
	# Don't prompt before opening the merge tool
	prompt = false
	# Don't keep backups of the merge tool inputs
	keepBackup = false
	# Don't keep the merge tool temporary input/output files
	keepTemporaries = false
[apply]
	# Cleanup whitespace by default when applying patches
	whitespace = fix
[rebase]
	# Run 'git stash' if needed before a rebase
	autoStash = true
[pull]
	rebase = true
[branch]
	# Should new branches be set up to be rebased upon git pull?  Yes.
	autosetuprebase = always
	# Setup git checkout -b $branch to always track the current branch
	autosetupmerge = always
[mergetool "araxis"]
	path = /Applications/Araxis Merge.app/Contents/Utilities/compare
[mergetool "diff3"]
	path = /usr/bin/diff3
[mergetool "meld"]
	cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
	path = /usr/bin/meld
[pager]
#	log  = diff-so-fancy | less -RFX
#	show = diff-so-fancy | less -RFX
#	diff = diff-so-fancy | less -RFX
[interactive]
#	diffFilter = diff-highlight --color-words
[color]
	ui = always
[color "diff-so-fancy"]
	oldNormal = red
	oldHighlight = red 52
	newNormal = green
	newHighlight = green 22
[color "diff-highlight"]
	oldNormal = red
	oldHighlight = red 52
	newNormal = green
	newHighlight = green 22
[color "diff"]
	meta = yellow
	frag = magenta
	commit = yellow bold
	old = red
	new = green
	whitespace = red reverse
[diff-so-fancy]
	changeHunkIndicators = true
	stripLeadingSymbols = false
[tig "bind"]
	generic = D !git difftool --tool=vimdiff --no-prompt --trust-exit-code %(commit)^!
[push]
	default = matching
[grep]
	lineNumber = true
